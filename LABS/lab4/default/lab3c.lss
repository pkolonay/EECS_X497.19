
lab3c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  0000099a  00000a2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010b  00800222  00800222  00000a50  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003af  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013f7  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000677  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c04  00000000  00000000  000028ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  000034f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042e  00000000  00000000  00003764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b7  00000000  00000000  00003b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00004049  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__vector_23>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e9       	ldi	r30, 0x9A	; 154
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	13 e0       	ldi	r17, 0x03	; 3
 110:	a2 e2       	ldi	r26, 0x22	; 34
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 32       	cpi	r26, 0x2D	; 45
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 94 04 	call	0x928	; 0x928 <main>
 122:	0c 94 cb 04 	jmp	0x996	; 0x996 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <drvinit>:
/* P.E. Kolonay */
#include "drvapi.h"

void drvinit() {
;
}
 12a:	08 95       	ret

0000012c <gpio_init>:
/* initialize gpio for specific port */
void gpio_init(PDRVCTRL ctrl, UINT8 portid) {
    DRVGPIO gpio = ctrl->gpio;
	gpio.baseaddr = portid;

}
 12c:	08 95       	ret

0000012e <gpio_pin_on>:
void gpio_write_pin(PDRVCTRL gpio, UINT8 portid, UINT8 pinid, UINT8 value) {
    write_pin(portid,pinid,value);
}
void gpio_pin_on()
{
}
 12e:	08 95       	ret

00000130 <serial_write>:


void serial_write() {


}
 130:	08 95       	ret

00000132 <serial_read>:


void serial_read() {

}
 132:	08 95       	ret

00000134 <init_timer>:

void init_timer() {

    timer_init(100);
 134:	84 e6       	ldi	r24, 0x64	; 100
 136:	0e 94 5f 02 	call	0x4be	; 0x4be <timer_init>

}
 13a:	08 95       	ret

0000013c <board_led_off>:
    write_pin(PORTB,pinid,LED_ON);

}

void board_led_off(UINT8 pinid)
{
 13c:	68 2f       	mov	r22, r24
    write_pin(PORTB,pinid,LED_OFF);
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	0e 94 05 03 	call	0x60a	; 0x60a <write_pin>

}
 148:	08 95       	ret

0000014a <board_led_on>:
{
}

/* platform */
void board_led_on(UINT8 pinid)
{
 14a:	68 2f       	mov	r22, r24
    write_pin(PORTB,pinid,LED_ON);
 14c:	85 b1       	in	r24, 0x05	; 5
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	0e 94 05 03 	call	0x60a	; 0x60a <write_pin>

}
 156:	08 95       	ret

00000158 <gpio_write_pin>:
/* read a pin from port spcified in gpio */
UINT8 gpio_read_pin(PDRVCTRL gpio, UINT8 portid, UINT8 pinid) {
    return(read_pin(portid,pinid));
}

void gpio_write_pin(PDRVCTRL gpio, UINT8 portid, UINT8 pinid, UINT8 value) {
 158:	86 2f       	mov	r24, r22
    write_pin(portid,pinid,value);
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	64 2f       	mov	r22, r20
 15e:	42 2f       	mov	r20, r18
 160:	0e 94 05 03 	call	0x60a	; 0x60a <write_pin>
}
 164:	08 95       	ret

00000166 <gpio_read_pin>:
	gpio.baseaddr = portid;

}

/* read a pin from port spcified in gpio */
UINT8 gpio_read_pin(PDRVCTRL gpio, UINT8 portid, UINT8 pinid) {
 166:	86 2f       	mov	r24, r22
    return(read_pin(portid,pinid));
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	64 2f       	mov	r22, r20
 16c:	0e 94 2a 03 	call	0x654	; 0x654 <read_pin>
}
 170:	08 95       	ret

00000172 <myitoa>:
  * Description: Convert 16-bit interger value to ascii string.
  * Parameters: myascii - array of ascii values.
  *             length -  length of ascii string.
  *             value - integer number to be converted
  */
void myitoa(UINT8 myascii[],UINT16 length, UINT16 value) {
 172:	af 92       	push	r10
 174:	bf 92       	push	r11
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	df 93       	push	r29
 184:	cf 93       	push	r28
 186:	00 d0       	rcall	.+0      	; 0x188 <myitoa+0x16>
 188:	00 d0       	rcall	.+0      	; 0x18a <myitoa+0x18>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	8c 01       	movw	r16, r24
 190:	7b 01       	movw	r14, r22
 
	volatile UINT8 i,j;
	volatile UINT16 divisor,dividend;

	divisor = value;
 192:	5c 83       	std	Y+4, r21	; 0x04
 194:	4b 83       	std	Y+3, r20	; 0x03

    /* work from highest power down to uints */
	/* but place characters in array in the opposite order */
    for(i=0;i<length-1;i++) {
 196:	19 82       	std	Y+1, r1	; 0x01
 198:	6b 01       	movw	r12, r22
 19a:	08 94       	sec
 19c:	c1 08       	sbc	r12, r1
 19e:	d1 08       	sbc	r13, r1
    	dividend = 1;
 1a0:	71 e0       	ldi	r23, 0x01	; 1
 1a2:	a7 2e       	mov	r10, r23
 1a4:	b1 2c       	mov	r11, r1
	    for(j=1;j<=(length-i-1);j++) dividend *= 10;
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	37 c0       	rjmp	.+110    	; 0x218 <myitoa+0xa6>
	divisor = value;

    /* work from highest power down to uints */
	/* but place characters in array in the opposite order */
    for(i=0;i<length-1;i++) {
    	dividend = 1;
 1aa:	be 82       	std	Y+6, r11	; 0x06
 1ac:	ad 82       	std	Y+5, r10	; 0x05
	    for(j=1;j<=(length-i-1);j++) dividend *= 10;
 1ae:	4a 83       	std	Y+2, r20	; 0x02
 1b0:	11 c0       	rjmp	.+34     	; 0x1d4 <myitoa+0x62>
 1b2:	8d 81       	ldd	r24, Y+5	; 0x05
 1b4:	9e 81       	ldd	r25, Y+6	; 0x06
 1b6:	9c 01       	movw	r18, r24
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	6a 95       	dec	r22
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <myitoa+0x48>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	28 0f       	add	r18, r24
 1c8:	39 1f       	adc	r19, r25
 1ca:	3e 83       	std	Y+6, r19	; 0x06
 1cc:	2d 83       	std	Y+5, r18	; 0x05
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	8a 83       	std	Y+2, r24	; 0x02
 1d4:	2a 81       	ldd	r18, Y+2	; 0x02
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	80 95       	com	r24
 1de:	90 95       	com	r25
 1e0:	8e 0d       	add	r24, r14
 1e2:	9f 1d       	adc	r25, r15
 1e4:	82 17       	cp	r24, r18
 1e6:	93 07       	cpc	r25, r19
 1e8:	20 f7       	brcc	.-56     	; 0x1b2 <myitoa+0x40>
	    myascii[i] = (divisor/dividend)+MAP_DIGIT_TO_ASCII;
 1ea:	29 81       	ldd	r18, Y+1	; 0x01
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	9c 81       	ldd	r25, Y+4	; 0x04
 1f0:	6d 81       	ldd	r22, Y+5	; 0x05
 1f2:	7e 81       	ldd	r23, Y+6	; 0x06
 1f4:	f8 01       	movw	r30, r16
 1f6:	e2 0f       	add	r30, r18
 1f8:	f1 1d       	adc	r31, r1
 1fa:	0e 94 b7 04 	call	0x96e	; 0x96e <__udivmodhi4>
 1fe:	60 5d       	subi	r22, 0xD0	; 208
 200:	60 83       	st	Z, r22
	    divisor = divisor%dividend;
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	9c 81       	ldd	r25, Y+4	; 0x04
 206:	6d 81       	ldd	r22, Y+5	; 0x05
 208:	7e 81       	ldd	r23, Y+6	; 0x06
 20a:	0e 94 b7 04 	call	0x96e	; 0x96e <__udivmodhi4>
 20e:	9c 83       	std	Y+4, r25	; 0x04
 210:	8b 83       	std	Y+3, r24	; 0x03

	divisor = value;

    /* work from highest power down to uints */
	/* but place characters in array in the opposite order */
    for(i=0;i<length-1;i++) {
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	8c 15       	cp	r24, r12
 21e:	9d 05       	cpc	r25, r13
 220:	20 f2       	brcs	.-120    	; 0x1aa <myitoa+0x38>
    	dividend = 1;
	    for(j=1;j<=(length-i-1);j++) dividend *= 10;
	    myascii[i] = (divisor/dividend)+MAP_DIGIT_TO_ASCII;
	    divisor = divisor%dividend;
    }
    myascii[length-1] = divisor+MAP_DIGIT_TO_ASCII;
 222:	8b 81       	ldd	r24, Y+3	; 0x03
 224:	9c 81       	ldd	r25, Y+4	; 0x04
 226:	0e 0d       	add	r16, r14
 228:	1f 1d       	adc	r17, r15
 22a:	01 50       	subi	r16, 0x01	; 1
 22c:	10 40       	sbci	r17, 0x00	; 0
 22e:	80 5d       	subi	r24, 0xD0	; 208
 230:	f8 01       	movw	r30, r16
 232:	80 83       	st	Z, r24
}
 234:	26 96       	adiw	r28, 0x06	; 6
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	cf 91       	pop	r28
 242:	df 91       	pop	r29
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	08 95       	ret

00000256 <drvSetBit>:
/**
  * Used to set a bit in a in a given byte at a given address.
  */
void drvSetBit(UINT16 addr, UINT8 position)
{;
}
 256:	08 95       	ret

00000258 <drvClearBit>:

/**
  * Used to clear a bit in a in a given byte at a given address.
  */
void drvClearBit(UINT16 addr,UINT8 position){;}
 258:	08 95       	ret

0000025a <process>:
    drvWriteReg(base,offset+1,value>>8);
    drvWriteReg(base,offset,(UINT8)(value&0xFF));
}


void process() {
 25a:	9f 92       	push	r9
 25c:	af 92       	push	r10
 25e:	bf 92       	push	r11
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	df 93       	push	r29
 26e:	cf 93       	push	r28
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	2c 97       	sbiw	r28, 0x0c	; 12
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 280:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 282:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
 284:	89 e2       	ldi	r24, 0x29	; 41
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	90 93 29 03 	sts	0x0329, r25
 28c:	80 93 28 03 	sts	0x0328, r24
				Buffer->Out = Buffer->Buffer;
 290:	90 93 2b 03 	sts	0x032B, r25
 294:	80 93 2a 03 	sts	0x032A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 298:	2f bf       	out	0x3f, r18	; 63
		 *
		 *  \return Boolean true if the buffer contains no free space, false otherwise
		 */		 
		static inline bool RingBuffer_IsEmpty(RingBuff_t* const Buffer)
		{
			return (RingBuffer_GetCount(Buffer) == 0);
 29a:	99 24       	eor	r9, r9
 29c:	93 94       	inc	r9
				myascii[0]='\0';
				/* read the write count from eeprom and convert to ascii */
				number_of_bytes_in_eeprom = drvReadEeprom(EEPROM_DATA_COUNT_ADDR)<<8;
				number_of_bytes_in_eeprom |= drvReadEeprom(EEPROM_DATA_COUNT_ADDR+1);
				if (number_of_bytes_in_eeprom >= 0)	{			
	                myitoa((UINT8 *)myascii,sizeof(myascii)-1,number_of_bytes_in_eeprom);
 29e:	e8 e0       	ldi	r30, 0x08	; 8
 2a0:	ce 2e       	mov	r12, r30
 2a2:	d1 2c       	mov	r13, r1
 2a4:	cc 0e       	add	r12, r28
 2a6:	dd 1e       	adc	r13, r29
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
 2a8:	5c 01       	movw	r10, r24
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2aa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2ac:	f8 94       	cli
			{
				Count = Buffer->Count;
 2ae:	90 91 2c 03 	lds	r25, 0x032C
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2b2:	8f bf       	out	0x3f, r24	; 63
		 *
		 *  \return Boolean true if the buffer contains no free space, false otherwise
		 */		 
		static inline bool RingBuffer_IsEmpty(RingBuff_t* const Buffer)
		{
			return (RingBuffer_GetCount(Buffer) == 0);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	99 23       	and	r25, r25
 2b8:	09 f4       	brne	.+2      	; 0x2bc <process+0x62>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
    
	/* Initialize the ring buffer for serial comm */
	RingBuffer_InitBuffer(&rbuff);

    while(1) {
	    isEmpty = RingBuffer_IsEmpty(&rbuff);
 2bc:	8b 83       	std	Y+3, r24	; 0x03
	    if(isEmpty == false) {
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	88 23       	and	r24, r24
 2c2:	99 f7       	brne	.-26     	; 0x2aa <process+0x50>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 2c4:	e0 91 2a 03 	lds	r30, 0x032A
 2c8:	f0 91 2b 03 	lds	r31, 0x032B
 2cc:	e0 81       	ld	r30, Z
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 2ce:	80 91 2a 03 	lds	r24, 0x032A
 2d2:	90 91 2b 03 	lds	r25, 0x032B
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	90 93 2b 03 	sts	0x032B, r25
 2dc:	80 93 2a 03 	sts	0x032A, r24
 2e0:	80 91 2a 03 	lds	r24, 0x032A
 2e4:	90 91 2b 03 	lds	r25, 0x032B
 2e8:	88 52       	subi	r24, 0x28	; 40
 2ea:	93 40       	sbci	r25, 0x03	; 3
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <process+0x9c>
			  Buffer->Out = Buffer->Buffer;
 2ee:	b0 92 2b 03 	sts	0x032B, r11
 2f2:	a0 92 2a 03 	sts	0x032A, r10

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2f6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2f8:	f8 94       	cli
			{
				Buffer->Count--;
 2fa:	90 91 2c 03 	lds	r25, 0x032C
 2fe:	91 50       	subi	r25, 0x01	; 1
 300:	90 93 2c 03 	sts	0x032C, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 304:	8f bf       	out	0x3f, r24	; 63
		    data_received = RingBuffer_Remove(&rbuff);
 306:	ea 83       	std	Y+2, r30	; 0x02
            if (data_received == RECORDING_CONTROL_CHAR) {
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	8a 31       	cpi	r24, 0x1A	; 26
 30c:	61 f4       	brne	.+24     	; 0x326 <process+0xcc>
	            /* if currently recording then stop else start recording */
	            if(!record_to_eeprom) {
 30e:	80 91 22 02 	lds	r24, 0x0222
 312:	88 23       	and	r24, r24
 314:	29 f4       	brne	.+10     	; 0x320 <process+0xc6>
			        /* reset character count */
			        drvResetEepromDataCount();
 316:	0e 94 b0 03 	call	0x760	; 0x760 <drvResetEepromDataCount>
	                record_to_eeprom = TRUE;
 31a:	90 92 22 02 	sts	0x0222, r9
 31e:	7b c0       	rjmp	.+246    	; 0x416 <process+0x1bc>
                } else {
		            record_to_eeprom = FALSE;
 320:	10 92 22 02 	sts	0x0222, r1
 324:	78 c0       	rjmp	.+240    	; 0x416 <process+0x1bc>
                }
            } else if (data_received == PLAYBACK_CHAR)  {
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	89 31       	cpi	r24, 0x19	; 25
 32a:	a9 f4       	brne	.+42     	; 0x356 <process+0xfc>
			    for(i = 1;i < next_eeprom_address;i++)
 32c:	99 82       	std	Y+1, r9	; 0x01
 32e:	09 c0       	rjmp	.+18     	; 0x342 <process+0xe8>
	                drvUSARTPutChar(drvReadEeprom(i));
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 43 03 	call	0x686	; 0x686 <drvReadEeprom>
 338:	0e 94 d7 02 	call	0x5ae	; 0x5ae <drvUSARTPutChar>
	                record_to_eeprom = TRUE;
                } else {
		            record_to_eeprom = FALSE;
                }
            } else if (data_received == PLAYBACK_CHAR)  {
			    for(i = 1;i < next_eeprom_address;i++)
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	20 91 27 02 	lds	r18, 0x0227
 348:	30 91 28 02 	lds	r19, 0x0228
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	82 17       	cp	r24, r18
 350:	93 07       	cpc	r25, r19
 352:	70 f3       	brcs	.-36     	; 0x330 <process+0xd6>
 354:	60 c0       	rjmp	.+192    	; 0x416 <process+0x1bc>
	                drvUSARTPutChar(drvReadEeprom(i));
            } else if (data_received == DUMP_NUMBER_OF_BYTES_CHAR) {
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	8e 30       	cpi	r24, 0x0E	; 14
 35a:	69 f5       	brne	.+90     	; 0x3b6 <process+0x15c>
	            /* initialize array */
	            drvUSARTWriteString((UINT8 *)BYTES_STORED_STRING,sizeof(BYTES_STORED_STRING));
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	6f e0       	ldi	r22, 0x0F	; 15
 362:	0e 94 c4 02 	call	0x588	; 0x588 <drvUSARTWriteString>
				/* initialize string */
				myascii[0]='\0';
 366:	18 86       	std	Y+8, r1	; 0x08
				/* read the write count from eeprom and convert to ascii */
				number_of_bytes_in_eeprom = drvReadEeprom(EEPROM_DATA_COUNT_ADDR)<<8;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 43 03 	call	0x686	; 0x686 <drvReadEeprom>
 370:	f8 2e       	mov	r15, r24
 372:	ee 24       	eor	r14, r14
 374:	fd 82       	std	Y+5, r15	; 0x05
 376:	ec 82       	std	Y+4, r14	; 0x04
				number_of_bytes_in_eeprom |= drvReadEeprom(EEPROM_DATA_COUNT_ADDR+1);
 378:	0c 81       	ldd	r16, Y+4	; 0x04
 37a:	1d 81       	ldd	r17, Y+5	; 0x05
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 43 03 	call	0x686	; 0x686 <drvReadEeprom>
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	80 2b       	or	r24, r16
 388:	91 2b       	or	r25, r17
 38a:	9d 83       	std	Y+5, r25	; 0x05
 38c:	8c 83       	std	Y+4, r24	; 0x04
				if (number_of_bytes_in_eeprom >= 0)	{			
 38e:	8c 81       	ldd	r24, Y+4	; 0x04
 390:	9d 81       	ldd	r25, Y+5	; 0x05
	                myitoa((UINT8 *)myascii,sizeof(myascii)-1,number_of_bytes_in_eeprom);
 392:	4c 81       	ldd	r20, Y+4	; 0x04
 394:	5d 81       	ldd	r21, Y+5	; 0x05
 396:	c6 01       	movw	r24, r12
 398:	64 e0       	ldi	r22, 0x04	; 4
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	0e 94 b9 00 	call	0x172	; 0x172 <myitoa>
				    /* send out the serial port */
					myascii[4] = '\0';
 3a0:	1c 86       	std	Y+12, r1	; 0x0c
                    drvUSARTWriteString((UINT8 *)myascii,sizeof(myascii));                   
 3a2:	c6 01       	movw	r24, r12
 3a4:	65 e0       	ldi	r22, 0x05	; 5
 3a6:	0e 94 c4 02 	call	0x588	; 0x588 <drvUSARTWriteString>
                } else {
				    drvUSARTPutChar('0');
                } 
		    	drvUSARTWriteString((UINT8 *)CR_LF_STRING,sizeof(CR_LF_STRING));
 3aa:	8f e0       	ldi	r24, 0x0F	; 15
 3ac:	92 e0       	ldi	r25, 0x02	; 2
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	0e 94 c4 02 	call	0x588	; 0x588 <drvUSARTWriteString>
 3b4:	30 c0       	rjmp	.+96     	; 0x416 <process+0x1bc>
	        } else if (record_to_eeprom) {
 3b6:	80 91 22 02 	lds	r24, 0x0222
 3ba:	88 23       	and	r24, r24
 3bc:	49 f1       	breq	.+82     	; 0x410 <process+0x1b6>
                drvWriteEeprom(next_eeprom_address, data_received);
 3be:	80 91 27 02 	lds	r24, 0x0227
 3c2:	90 91 28 02 	lds	r25, 0x0228
 3c6:	6a 81       	ldd	r22, Y+2	; 0x02
 3c8:	0e 94 8d 03 	call	0x71a	; 0x71a <drvWriteEeprom>
			    drvUpdateEepromDataCount();
 3cc:	0e 94 c5 03 	call	0x78a	; 0x78a <drvUpdateEepromDataCount>
	            drvUSARTPutChar(data_received);
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <drvUSARTPutChar>
	            if (data_received == CR_CHAR) {
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	8d 30       	cpi	r24, 0x0D	; 13
 3da:	59 f4       	brne	.+22     	; 0x3f2 <process+0x198>
				    drvWriteEeprom(next_eeprom_address, LF_CHAR);
 3dc:	80 91 27 02 	lds	r24, 0x0227
 3e0:	90 91 28 02 	lds	r25, 0x0228
 3e4:	6a e0       	ldi	r22, 0x0A	; 10
 3e6:	0e 94 8d 03 	call	0x71a	; 0x71a <drvWriteEeprom>
			        drvUpdateEepromDataCount();
 3ea:	0e 94 c5 03 	call	0x78a	; 0x78a <drvUpdateEepromDataCount>
		            drvUSARTPutChar(LF_CHAR);
 3ee:	8a e0       	ldi	r24, 0x0A	; 10
 3f0:	10 c0       	rjmp	.+32     	; 0x412 <process+0x1b8>
                } else if (data_received == BACKSPACE_CHAR) {
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	88 30       	cpi	r24, 0x08	; 8
 3f6:	79 f4       	brne	.+30     	; 0x416 <process+0x1bc>
			        drvUpdateEepromDataCount(-1);
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	9f ef       	ldi	r25, 0xFF	; 255
 3fc:	0e 94 c5 03 	call	0x78a	; 0x78a <drvUpdateEepromDataCount>
                    drvWriteEeprom(next_eeprom_address, data_received);
 400:	80 91 27 02 	lds	r24, 0x0227
 404:	90 91 28 02 	lds	r25, 0x0228
 408:	6a 81       	ldd	r22, Y+2	; 0x02
 40a:	0e 94 8d 03 	call	0x71a	; 0x71a <drvWriteEeprom>
 40e:	03 c0       	rjmp	.+6      	; 0x416 <process+0x1bc>
	            }
            } else 
	            drvUSARTPutChar(data_received);
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	0e 94 d7 02 	call	0x5ae	; 0x5ae <drvUSARTPutChar>

            for(j=0;j<10000;j++);
 416:	1f 82       	std	Y+7, r1	; 0x07
 418:	1e 82       	std	Y+6, r1	; 0x06
 41a:	05 c0       	rjmp	.+10     	; 0x426 <process+0x1cc>
 41c:	8e 81       	ldd	r24, Y+6	; 0x06
 41e:	9f 81       	ldd	r25, Y+7	; 0x07
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	9f 83       	std	Y+7, r25	; 0x07
 424:	8e 83       	std	Y+6, r24	; 0x06
 426:	8e 81       	ldd	r24, Y+6	; 0x06
 428:	9f 81       	ldd	r25, Y+7	; 0x07
 42a:	80 51       	subi	r24, 0x10	; 16
 42c:	97 42       	sbci	r25, 0x27	; 39
 42e:	08 f0       	brcs	.+2      	; 0x432 <process+0x1d8>
 430:	3c cf       	rjmp	.-392    	; 0x2aa <process+0x50>
 432:	f4 cf       	rjmp	.-24     	; 0x41c <process+0x1c2>

00000434 <drvWriteUint16Reg>:

    return( value >> position);
}


void drvWriteUint16Reg(const UINT16 base, UINT16 offset, UINT16 value) {
 434:	df 92       	push	r13
 436:	ef 92       	push	r14
 438:	ff 92       	push	r15
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	8c 01       	movw	r16, r24
 440:	7b 01       	movw	r14, r22
 442:	d4 2e       	mov	r13, r20
 444:	45 2f       	mov	r20, r21
    /* write hi then low */
    drvWriteReg(base,offset+1,value>>8);
 446:	6f 5f       	subi	r22, 0xFF	; 255
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <drvWriteReg>
    drvWriteReg(base,offset,(UINT8)(value&0xFF));
 44e:	c8 01       	movw	r24, r16
 450:	b7 01       	movw	r22, r14
 452:	4d 2d       	mov	r20, r13
 454:	0e 94 52 02 	call	0x4a4	; 0x4a4 <drvWriteReg>
}
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	ff 90       	pop	r15
 45e:	ef 90       	pop	r14
 460:	df 90       	pop	r13
 462:	08 95       	ret

00000464 <drvTestBit>:


/**
  * Used to test a bit in a in a given byte at a given address.
  */
UINT8 drvTestBit(UINT16 addr, UINT16 offset, UINT8 position) {
 464:	1f 93       	push	r17
 466:	df 93       	push	r29
 468:	cf 93       	push	r28
 46a:	0f 92       	push	r0
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	14 2f       	mov	r17, r20
    volatile UINT8 value;

    value = (UINT8)~drvReadReg(addr,offset) & (1<<position);
 472:	0e 94 59 02 	call	0x4b2	; 0x4b2 <drvReadReg>
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	01 2e       	mov	r0, r17
 47c:	02 c0       	rjmp	.+4      	; 0x482 <drvTestBit+0x1e>
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <drvTestBit+0x1a>
 486:	80 95       	com	r24
 488:	82 23       	and	r24, r18
 48a:	89 83       	std	Y+1, r24	; 0x01

    return( value >> position);
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <drvTestBit+0x32>
 492:	95 95       	asr	r25
 494:	87 95       	ror	r24
 496:	1a 95       	dec	r17
 498:	e2 f7       	brpl	.-8      	; 0x492 <drvTestBit+0x2e>
}
 49a:	0f 90       	pop	r0
 49c:	cf 91       	pop	r28
 49e:	df 91       	pop	r29
 4a0:	1f 91       	pop	r17
 4a2:	08 95       	ret

000004a4 <drvWriteReg>:
/* delay in milliseconds */
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
 4a4:	fb 01       	movw	r30, r22
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 4a6:	e8 0f       	add	r30, r24
 4a8:	f9 1f       	adc	r31, r25
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	51 83       	std	Z+1, r21	; 0x01
 4ae:	40 83       	st	Z, r20
}
 4b0:	08 95       	ret

000004b2 <drvReadReg>:

/* wrapper for writing register */
UINT8 drvReadReg(UINT16 base, UINT16 offset)
{
 4b2:	fb 01       	movw	r30, r22
	return *((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER)));
 4b4:	e8 0f       	add	r30, r24
 4b6:	f9 1f       	adc	r31, r25
 4b8:	80 81       	ld	r24, Z
 4ba:	91 81       	ldd	r25, Z+1	; 0x01
}
 4bc:	08 95       	ret

000004be <timer_init>:


void timer_init(UINT8 delay) { 

    /* global interrupt disable */
    cli();
 4be:	f8 94       	cli

    /* set pre-scaler to F_CPU/1024 */
    HWREG(TCCR0B) |= TC0_CK_1024;
 4c0:	e5 b5       	in	r30, 0x25	; 37
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	20 81       	ld	r18, Z
 4c6:	31 81       	ldd	r19, Z+1	; 0x01
 4c8:	22 60       	ori	r18, 0x02	; 2
 4ca:	31 83       	std	Z+1, r19	; 0x01
 4cc:	20 83       	st	Z, r18
    
    /* Program the timer with the value you want 
    which is (256-the number of counts) into TCNT0. */ 
    HWREG(TCNT0) = 256-delay; 
 4ce:	e6 b5       	in	r30, 0x26	; 38
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	31 e0       	ldi	r19, 0x01	; 1
 4d6:	28 1b       	sub	r18, r24
 4d8:	31 09       	sbc	r19, r1
 4da:	31 83       	std	Z+1, r19	; 0x01
 4dc:	20 83       	st	Z, r18

    /* Enable Overflow Interrupt for Counter 0 */
    HWREG(TIMSK0) = TOIE0; 
 4de:	e0 91 6e 00 	lds	r30, 0x006E
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	11 82       	std	Z+1, r1	; 0x01
 4e6:	10 82       	st	Z, r1

    /* Enable Global Interrupts */ 
    sei();
 4e8:	78 94       	sei

}
 4ea:	08 95       	ret

000004ec <__vector_25>:
 * USART0 RX Complete ISR 
 * Read the USART data register.
 * If ctl-Z set record to eeprom flag
 */
void __vector_25 (void) 
{ 
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	0b b6       	in	r0, 0x3b	; 59
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
 502:	df 93       	push	r29
 504:	cf 93       	push	r28
 506:	0f 92       	push	r0
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
}

/* wrapper for writing register */
UINT8 drvReadReg(UINT16 base, UINT16 offset)
{
	return *((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER)));
 50c:	80 91 c6 00 	lds	r24, 0x00C6
 510:	90 91 c7 00 	lds	r25, 0x00C7
void __vector_25 (void) 
{ 
    volatile UINT8 data_received;

    /* Set the Data Register Empty flag */
    data_received = drvReadReg(USART0_BASEADDR,USART_UDR_OFFSET);
 514:	89 83       	std	Y+1, r24	; 0x01
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 516:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 518:	f8 94       	cli
			{
				Count = Buffer->Count;
 51a:	90 91 2c 03 	lds	r25, 0x032C
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 51e:	8f bf       	out	0x3f, r24	; 63
	/* put it in the queue */
    if(!RingBuffer_IsFull(&rbuff))
 520:	9f 3f       	cpi	r25, 0xFF	; 255
 522:	19 f1       	breq	.+70     	; 0x56a <__vector_25+0x7e>
	    RingBuffer_Insert(&rbuff,data_received);
 524:	89 81       	ldd	r24, Y+1	; 0x01
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 526:	e0 91 28 03 	lds	r30, 0x0328
 52a:	f0 91 29 03 	lds	r31, 0x0329
 52e:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 530:	80 91 28 03 	lds	r24, 0x0328
 534:	90 91 29 03 	lds	r25, 0x0329
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	90 93 29 03 	sts	0x0329, r25
 53e:	80 93 28 03 	sts	0x0328, r24
 542:	e0 91 28 03 	lds	r30, 0x0328
 546:	f0 91 29 03 	lds	r31, 0x0329
 54a:	83 e0       	ldi	r24, 0x03	; 3
 54c:	e8 32       	cpi	r30, 0x28	; 40
 54e:	f8 07       	cpc	r31, r24
 550:	21 f4       	brne	.+8      	; 0x55a <__vector_25+0x6e>
			  Buffer->In = Buffer->Buffer;
 552:	89 e2       	ldi	r24, 0x29	; 41
 554:	92 e0       	ldi	r25, 0x02	; 2
 556:	91 83       	std	Z+1, r25	; 0x01
 558:	80 83       	st	Z, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 55a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 55c:	f8 94       	cli
			{
				Buffer->Count++;
 55e:	80 91 2c 03 	lds	r24, 0x032C
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	80 93 2c 03 	sts	0x032C, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 568:	9f bf       	out	0x3f, r25	; 63


	sei();
 56a:	78 94       	sei
}
 56c:	0f 90       	pop	r0
 56e:	cf 91       	pop	r28
 570:	df 91       	pop	r29
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	0f 90       	pop	r0
 57c:	0b be       	out	0x3b, r0	; 59
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <drvUSARTWriteString>:
    /* send I'm alive message */
	drvUSARTWriteString((UINT8 *)string, sizeof(string));
}

void drvUSARTWriteString(const UINT8 * data,UINT8 length)
{
 588:	fc 01       	movw	r30, r24
 58a:	0d c0       	rjmp	.+26     	; 0x5a6 <drvUSARTWriteString+0x1e>
}

/* wrapper for writing register */
UINT8 drvReadReg(UINT16 base, UINT16 offset)
{
	return *((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER)));
 58c:	80 91 c0 00 	lds	r24, 0x00C0
 590:	90 91 c1 00 	lds	r25, 0x00C1
	while(*data != '\0')
	    drvUSARTPutChar(*data++);
}
 
void drvUSARTPutChar(UINT8 data) {
    while((drvReadReg(USART0_BASEADDR,USART_UCSRA_OFFSET) & USART_DATA_REG_EMPTY) 
 594:	85 ff       	sbrs	r24, 5
 596:	fa cf       	rjmp	.-12     	; 0x58c <drvUSARTWriteString+0x4>
}

void drvUSARTWriteString(const UINT8 * data,UINT8 length)
{
	while(*data != '\0')
	    drvUSARTPutChar(*data++);
 598:	31 96       	adiw	r30, 0x01	; 1
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 59a:	82 2f       	mov	r24, r18
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	90 93 c7 00 	sts	0x00C7, r25
 5a2:	80 93 c6 00 	sts	0x00C6, r24
	drvUSARTWriteString((UINT8 *)string, sizeof(string));
}

void drvUSARTWriteString(const UINT8 * data,UINT8 length)
{
	while(*data != '\0')
 5a6:	20 81       	ld	r18, Z
 5a8:	22 23       	and	r18, r18
 5aa:	81 f7       	brne	.-32     	; 0x58c <drvUSARTWriteString+0x4>
	    drvUSARTPutChar(*data++);
}
 5ac:	08 95       	ret

000005ae <drvUSARTPutChar>:
 
void drvUSARTPutChar(UINT8 data) {
 5ae:	28 2f       	mov	r18, r24
}

/* wrapper for writing register */
UINT8 drvReadReg(UINT16 base, UINT16 offset)
{
	return *((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER)));
 5b0:	80 91 c0 00 	lds	r24, 0x00C0
 5b4:	90 91 c1 00 	lds	r25, 0x00C1
	while(*data != '\0')
	    drvUSARTPutChar(*data++);
}
 
void drvUSARTPutChar(UINT8 data) {
    while((drvReadReg(USART0_BASEADDR,USART_UCSRA_OFFSET) & USART_DATA_REG_EMPTY) 
 5b8:	85 ff       	sbrs	r24, 5
 5ba:	fa cf       	rjmp	.-12     	; 0x5b0 <drvUSARTPutChar+0x2>
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 5bc:	82 2f       	mov	r24, r18
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	90 93 c7 00 	sts	0x00C7, r25
 5c4:	80 93 c6 00 	sts	0x00C6, r24
void drvUSARTPutChar(UINT8 data) {
    while((drvReadReg(USART0_BASEADDR,USART_UCSRA_OFFSET) & USART_DATA_REG_EMPTY) 
	        != USART_DATA_REG_EMPTY) { ; }
	drvWriteReg(USART0_BASEADDR,USART_UDR_OFFSET,data);

}
 5c8:	08 95       	ret

000005ca <init_gpio>:
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 5ca:	8f ef       	ldi	r24, 0xFF	; 255
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	96 b9       	out	0x06, r25	; 6
 5d0:	85 b9       	out	0x05, r24	; 5
void init_gpio(UINT16 port) {
 /* set portb for output to LEDs */
 drvWriteReg(DRV_PORTB,DRV_GPIO_PORT_OFFSET , 0xFF);
 /* set portd for input from switches */
 drvWriteReg(DRV_PORTD,DRV_GPIO_PORT_OFFSET , 0x00);
}
 5d2:	1c b8       	out	0x0c, r1	; 12
 5d4:	1b b8       	out	0x0b, r1	; 11
 5d6:	08 95       	ret

000005d8 <toggle_pin>:


void toggle_pin(UINT16 port, UINT8 pin) {
 5d8:	fc 01       	movw	r30, r24

	/* set port for output */
	HWREG(port-1) |= 1<<pin; 
 5da:	dc 01       	movw	r26, r24
 5dc:	11 97       	sbiw	r26, 0x01	; 1
 5de:	2d 91       	ld	r18, X+
 5e0:	3c 91       	ld	r19, X
 5e2:	11 97       	sbiw	r26, 0x01	; 1
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <toggle_pin+0x16>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	6a 95       	dec	r22
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <toggle_pin+0x12>
 5f2:	28 2b       	or	r18, r24
 5f4:	39 2b       	or	r19, r25
 5f6:	11 96       	adiw	r26, 0x01	; 1
 5f8:	3c 93       	st	X, r19
 5fa:	2e 93       	st	-X, r18


	HWREG(port) ^= 1<<pin;
 5fc:	20 81       	ld	r18, Z
 5fe:	31 81       	ldd	r19, Z+1	; 0x01
 600:	82 27       	eor	r24, r18
 602:	93 27       	eor	r25, r19
 604:	91 83       	std	Z+1, r25	; 0x01
 606:	80 83       	st	Z, r24
}
 608:	08 95       	ret

0000060a <write_pin>:


void write_pin(UINT16 port, UINT8 pin, UINT8 value) {
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	ec 01       	movw	r28, r24

	/* set port for output */
	HWREG(port-1) |= 1<<pin; 
 610:	fc 01       	movw	r30, r24
 612:	31 97       	sbiw	r30, 0x01	; 1
 614:	80 81       	ld	r24, Z
 616:	91 81       	ldd	r25, Z+1	; 0x01
 618:	a1 e0       	ldi	r26, 0x01	; 1
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <write_pin+0x18>
 61e:	aa 0f       	add	r26, r26
 620:	bb 1f       	adc	r27, r27
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <write_pin+0x14>
 626:	8a 2b       	or	r24, r26
 628:	9b 2b       	or	r25, r27
 62a:	91 83       	std	Z+1, r25	; 0x01
 62c:	80 83       	st	Z, r24

    if (value)
 62e:	44 23       	and	r20, r20
 630:	29 f0       	breq	.+10     	; 0x63c <write_pin+0x32>
	/* output to port */
        HWREG(port) |= (1<<pin); 
 632:	88 81       	ld	r24, Y
 634:	99 81       	ldd	r25, Y+1	; 0x01
 636:	8a 2b       	or	r24, r26
 638:	9b 2b       	or	r25, r27
 63a:	07 c0       	rjmp	.+14     	; 0x64a <write_pin+0x40>
    else
	    HWREG(port) &= (UINT8)~(1<<pin);
 63c:	28 81       	ld	r18, Y
 63e:	39 81       	ldd	r19, Y+1	; 0x01
 640:	8a 2f       	mov	r24, r26
 642:	80 95       	com	r24
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	82 23       	and	r24, r18
 648:	93 23       	and	r25, r19
 64a:	99 83       	std	Y+1, r25	; 0x01
 64c:	88 83       	st	Y, r24
}
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <read_pin>:


UINT8 read_pin(UINT16 port, UINT8 pin) {
 654:	fc 01       	movw	r30, r24

	/* set port for input */
	HWREG(port-1) &= (UINT8)~pin; 
 656:	dc 01       	movw	r26, r24
 658:	11 97       	sbiw	r26, 0x01	; 1
 65a:	2d 91       	ld	r18, X+
 65c:	3c 91       	ld	r19, X
 65e:	11 97       	sbiw	r26, 0x01	; 1
 660:	86 2f       	mov	r24, r22
 662:	80 95       	com	r24
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	82 23       	and	r24, r18
 668:	93 23       	and	r25, r19
 66a:	11 96       	adiw	r26, 0x01	; 1
 66c:	9c 93       	st	X, r25
 66e:	8e 93       	st	-X, r24

	return(HWREG(port-2) &= pin);
 670:	32 97       	sbiw	r30, 0x02	; 2
 672:	80 81       	ld	r24, Z
 674:	91 81       	ldd	r25, Z+1	; 0x01
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	86 23       	and	r24, r22
 67a:	97 23       	and	r25, r23
 67c:	91 83       	std	Z+1, r25	; 0x01
 67e:	80 83       	st	Z, r24
 680:	80 81       	ld	r24, Z
 682:	91 81       	ldd	r25, Z+1	; 0x01

}
 684:	08 95       	ret

00000686 <drvReadEeprom>:
    /*EECR |= (1<<EEPE);*/
    drvWriteReg(EEPROM_BASE,EEPROM_CTRL_OFFSET,EEPROM_PRG_EN);
    
}

UINT8 drvReadEeprom(UINT16 addr) {
 686:	ac 01       	movw	r20, r24

    /* Wait for completion of previous write */
    while(drvReadReg(EEPROM_BASE,EEPROM_CTRL_OFFSET) & EEPROM_PRG_EN)
 688:	ef b3       	in	r30, 0x1f	; 31
}

/* wrapper for writing register */
UINT8 drvReadReg(UINT16 base, UINT16 offset)
{
	return *((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER)));
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	91 81       	ldd	r25, Z+1	; 0x01
}

UINT8 drvReadEeprom(UINT16 addr) {

    /* Wait for completion of previous write */
    while(drvReadReg(EEPROM_BASE,EEPROM_CTRL_OFFSET) & EEPROM_PRG_EN)
 690:	81 fd       	sbrc	r24, 1
 692:	fa cf       	rjmp	.-12     	; 0x688 <drvReadEeprom+0x2>
    ;
    /* Set up address register */
    /*EEAR = uiAddress;*/
	drvWriteUint16Reg(EEPROM_BASE,EEPROM_ADDR_OFFSET,addr);
 694:	8f b3       	in	r24, 0x1f	; 31
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	62 e0       	ldi	r22, 0x02	; 2
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	0e 94 1a 02 	call	0x434	; 0x434 <drvWriteUint16Reg>

    /* Start eeprom read by writing EERE */
    /*EECR |= (1<<EERE);*/
    /*eeprom_control_reg = drvReadReg(EEPROM_BASE,EEPROM_CTRL_OFFSET) | EEPROM_READ_EN;*/
    drvWriteReg(EEPROM_BASE,EEPROM_CTRL_OFFSET,EEPROM_READ_EN);
 6a0:	ef b3       	in	r30, 0x1f	; 31
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	91 83       	std	Z+1, r25	; 0x01
 6aa:	80 83       	st	Z, r24
    /*EECR |= (1<<EERE);*/
    /*eeprom_control_reg = drvReadReg(EEPROM_BASE,EEPROM_CTRL_OFFSET) | EEPROM_READ_EN;*/
    drvWriteReg(EEPROM_BASE,EEPROM_CTRL_OFFSET,EEPROM_READ_EN);

    /* Return data from Data Register */
    return drvReadReg(EEPROM_BASE,EEPROM_DATA_OFFSET);
 6ac:	ef b3       	in	r30, 0x1f	; 31
}

/* wrapper for writing register */
UINT8 drvReadReg(UINT16 base, UINT16 offset)
{
	return *((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER)));
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	81 81       	ldd	r24, Z+1	; 0x01
 6b2:	92 81       	ldd	r25, Z+2	; 0x02
    drvWriteReg(EEPROM_BASE,EEPROM_CTRL_OFFSET,EEPROM_READ_EN);

    /* Return data from Data Register */
    return drvReadReg(EEPROM_BASE,EEPROM_DATA_OFFSET);

}
 6b4:	08 95       	ret

000006b6 <init_eeprom>:

/**
  * Get the number of bytes currently written to eprom and 
  * set pointer to next address available for writing.
  */
void init_eeprom() {
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17

    number_of_bytes_used_in_eeprom = (drvReadEeprom(EEPROM_DATA_COUNT_ADDR)<<8);
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 43 03 	call	0x686	; 0x686 <drvReadEeprom>
 6c2:	38 2f       	mov	r19, r24
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	30 93 26 02 	sts	0x0226, r19
 6ca:	20 93 25 02 	sts	0x0225, r18
    number_of_bytes_used_in_eeprom |= drvReadEeprom(EEPROM_DATA_COUNT_ADDR+1);
 6ce:	00 91 25 02 	lds	r16, 0x0225
 6d2:	10 91 26 02 	lds	r17, 0x0226
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 43 03 	call	0x686	; 0x686 <drvReadEeprom>
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	80 2b       	or	r24, r16
 6e2:	91 2b       	or	r25, r17
 6e4:	90 93 26 02 	sts	0x0226, r25
 6e8:	80 93 25 02 	sts	0x0225, r24
	if ( number_of_bytes_used_in_eeprom == 0xFF ) 
 6ec:	80 91 25 02 	lds	r24, 0x0225
 6f0:	90 91 26 02 	lds	r25, 0x0226
 6f4:	8f 3f       	cpi	r24, 0xFF	; 255
 6f6:	91 05       	cpc	r25, r1
 6f8:	21 f4       	brne	.+8      	; 0x702 <init_eeprom+0x4c>
        number_of_bytes_used_in_eeprom = 0;
 6fa:	10 92 26 02 	sts	0x0226, r1
 6fe:	10 92 25 02 	sts	0x0225, r1
	next_eeprom_address = number_of_bytes_used_in_eeprom + 1;
 702:	80 91 25 02 	lds	r24, 0x0225
 706:	90 91 26 02 	lds	r25, 0x0226
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	90 93 28 02 	sts	0x0228, r25
 710:	80 93 27 02 	sts	0x0227, r24

}
 714:	1f 91       	pop	r17
 716:	0f 91       	pop	r16
 718:	08 95       	ret

0000071a <drvWriteEeprom>:


/* do we have to manage a buffer here in case the eeprom is not ready? */
void drvWriteEeprom(UINT16 addr, UINT8 data)
{
 71a:	1f 93       	push	r17
 71c:	ac 01       	movw	r20, r24
 71e:	16 2f       	mov	r17, r22
    /* Wait for completion of previous write */
    /*while(EECR & (1<<EEPE))*/
    while(drvReadReg(EEPROM_BASE,EEPROM_CTRL_OFFSET) & EEPROM_PRG_EN)
 720:	ef b3       	in	r30, 0x1f	; 31
}

/* wrapper for writing register */
UINT8 drvReadReg(UINT16 base, UINT16 offset)
{
	return *((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER)));
 722:	f0 e0       	ldi	r31, 0x00	; 0
 724:	80 81       	ld	r24, Z
 726:	91 81       	ldd	r25, Z+1	; 0x01
/* do we have to manage a buffer here in case the eeprom is not ready? */
void drvWriteEeprom(UINT16 addr, UINT8 data)
{
    /* Wait for completion of previous write */
    /*while(EECR & (1<<EEPE))*/
    while(drvReadReg(EEPROM_BASE,EEPROM_CTRL_OFFSET) & EEPROM_PRG_EN)
 728:	81 fd       	sbrc	r24, 1
 72a:	fa cf       	rjmp	.-12     	; 0x720 <drvWriteEeprom+0x6>
    ;

    /* Set up address and Data Registers */
    /*EEAR = uiAddress;*/
	drvWriteUint16Reg(EEPROM_BASE,EEPROM_ADDR_OFFSET,addr);
 72c:	8f b3       	in	r24, 0x1f	; 31
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	62 e0       	ldi	r22, 0x02	; 2
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	0e 94 1a 02 	call	0x434	; 0x434 <drvWriteUint16Reg>

    /*EEDR = ucData;*/
    drvWriteReg(EEPROM_BASE,EEPROM_DATA_OFFSET,data);
 738:	ef b3       	in	r30, 0x1f	; 31
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	81 2f       	mov	r24, r17
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	92 83       	std	Z+2, r25	; 0x02
 742:	81 83       	std	Z+1, r24	; 0x01
    /*EEDR = ucData;*/
    drvWriteReg(EEPROM_BASE,EEPROM_DATA_OFFSET,data);

    /* Write logical one to EEMPE */
    /*EECR |= (1<<EEMPE);*/
    drvWriteReg(EEPROM_BASE,EEPROM_CTRL_OFFSET,EEPROM_MSTR_PRG_EN);
 744:	ef b3       	in	r30, 0x1f	; 31
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	84 e0       	ldi	r24, 0x04	; 4
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	91 83       	std	Z+1, r25	; 0x01
 74e:	80 83       	st	Z, r24
    /*EECR |= (1<<EEMPE);*/
    drvWriteReg(EEPROM_BASE,EEPROM_CTRL_OFFSET,EEPROM_MSTR_PRG_EN);

    /* Start eeprom write by setting EEPE */
    /*EECR |= (1<<EEPE);*/
    drvWriteReg(EEPROM_BASE,EEPROM_CTRL_OFFSET,EEPROM_PRG_EN);
 750:	ef b3       	in	r30, 0x1f	; 31
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	91 83       	std	Z+1, r25	; 0x01
 75a:	80 83       	st	Z, r24

    /* Start eeprom write by setting EEPE */
    /*EECR |= (1<<EEPE);*/
    drvWriteReg(EEPROM_BASE,EEPROM_CTRL_OFFSET,EEPROM_PRG_EN);
    
}
 75c:	1f 91       	pop	r17
 75e:	08 95       	ret

00000760 <drvResetEepromDataCount>:
	next_eeprom_address++;
}

void drvResetEepromDataCount() {

    drvWriteEeprom(EEPROM_DATA_COUNT_ADDR, 0);
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	0e 94 8d 03 	call	0x71a	; 0x71a <drvWriteEeprom>
    drvWriteEeprom(EEPROM_DATA_COUNT_ADDR+1, 0);
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	0e 94 8d 03 	call	0x71a	; 0x71a <drvWriteEeprom>

	number_of_bytes_used_in_eeprom = 0;
 774:	10 92 26 02 	sts	0x0226, r1
 778:	10 92 25 02 	sts	0x0225, r1
	next_eeprom_address = EEPROM_DATA_START_ADDR;
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	90 93 28 02 	sts	0x0228, r25
 784:	80 93 27 02 	sts	0x0227, r24
}
 788:	08 95       	ret

0000078a <drvUpdateEepromDataCount>:

}

void drvUpdateEepromDataCount() {

    drvWriteEeprom(EEPROM_DATA_COUNT_ADDR, (next_eeprom_address>>8));
 78a:	20 91 27 02 	lds	r18, 0x0227
 78e:	30 91 28 02 	lds	r19, 0x0228
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	63 2f       	mov	r22, r19
 798:	0e 94 8d 03 	call	0x71a	; 0x71a <drvWriteEeprom>
    drvWriteEeprom(EEPROM_DATA_COUNT_ADDR+1, (next_eeprom_address&0xFF));
 79c:	60 91 27 02 	lds	r22, 0x0227
 7a0:	70 91 28 02 	lds	r23, 0x0228
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 8d 03 	call	0x71a	; 0x71a <drvWriteEeprom>
	next_eeprom_address++;
 7ac:	80 91 27 02 	lds	r24, 0x0227
 7b0:	90 91 28 02 	lds	r25, 0x0228
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	90 93 28 02 	sts	0x0228, r25
 7ba:	80 93 27 02 	sts	0x0227, r24
}
 7be:	08 95       	ret

000007c0 <init_usart0>:

	sei();
}

void init_usart0() 
{
 7c0:	df 93       	push	r29
 7c2:	cf 93       	push	r28
 7c4:	cd b7       	in	r28, 0x3d	; 61
 7c6:	de b7       	in	r29, 0x3e	; 62
 7c8:	2f 97       	sbiw	r28, 0x0f	; 15
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61

    volatile UINT8 string[] = "Hello World\r\n";
 7d4:	de 01       	movw	r26, r28
 7d6:	12 96       	adiw	r26, 0x02	; 2
 7d8:	e2 e1       	ldi	r30, 0x12	; 18
 7da:	f2 e0       	ldi	r31, 0x02	; 2
 7dc:	8e e0       	ldi	r24, 0x0E	; 14
 7de:	01 90       	ld	r0, Z+
 7e0:	0d 92       	st	X+, r0
 7e2:	81 50       	subi	r24, 0x01	; 1
 7e4:	e1 f7       	brne	.-8      	; 0x7de <init_usart0+0x1e>
    volatile UINT8 val = 0;
 7e6:	19 82       	std	Y+1, r1	; 0x01

	val = USART_RX_EN | USART_TX_EN | USART_RX_COMP_IE;
 7e8:	88 e9       	ldi	r24, 0x98	; 152
 7ea:	89 83       	std	Y+1, r24	; 0x01
    drvWriteReg(USART0_BASEADDR,USART_UCSRB_OFFSET,val);
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	90 93 c2 00 	sts	0x00C2, r25
 7f4:	80 93 c1 00 	sts	0x00C1, r24
    volatile UINT8 val = 0;

	val = USART_RX_EN | USART_TX_EN | USART_RX_COMP_IE;
    drvWriteReg(USART0_BASEADDR,USART_UCSRB_OFFSET,val);

	val = USART_8_DATA_BITS;
 7f8:	86 e0       	ldi	r24, 0x06	; 6
 7fa:	89 83       	std	Y+1, r24	; 0x01
    drvWriteReg(USART0_BASEADDR,USART_UCSRC_OFFSET,val);
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	90 93 c3 00 	sts	0x00C3, r25
 804:	80 93 c2 00 	sts	0x00C2, r24

	val = USART_8_DATA_BITS;
    drvWriteReg(USART0_BASEADDR,USART_UCSRC_OFFSET,val);

    /* calculate baud rate based on cpu frequency */
	val = ((F_CPU + 9600 * 8L) / (9600 * 16L) - 1);
 808:	83 e3       	ldi	r24, 0x33	; 51
 80a:	89 83       	std	Y+1, r24	; 0x01

    /* write baud rate register */
   	drvWriteUint16Reg(USART0_BASEADDR,USART_UBRR_OFFSET,val);
 80c:	49 81       	ldd	r20, Y+1	; 0x01
 80e:	80 ec       	ldi	r24, 0xC0	; 192
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	64 e0       	ldi	r22, 0x04	; 4
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	0e 94 1a 02 	call	0x434	; 0x434 <drvWriteUint16Reg>
 81c:	20 e0       	ldi	r18, 0x00	; 0
 81e:	30 e0       	ldi	r19, 0x00	; 0
	drvUSARTWriteString((UINT8 *)string, sizeof(string));
}

void drvUSARTWriteString(const UINT8 * data,UINT8 length)
{
	while(*data != '\0')
 820:	ae 01       	movw	r20, r28
 822:	4e 5f       	subi	r20, 0xFE	; 254
 824:	5f 4f       	sbci	r21, 0xFF	; 255
 826:	0e c0       	rjmp	.+28     	; 0x844 <init_usart0+0x84>
}

/* wrapper for writing register */
UINT8 drvReadReg(UINT16 base, UINT16 offset)
{
	return *((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER)));
 828:	80 91 c0 00 	lds	r24, 0x00C0
 82c:	90 91 c1 00 	lds	r25, 0x00C1
	while(*data != '\0')
	    drvUSARTPutChar(*data++);
}
 
void drvUSARTPutChar(UINT8 data) {
    while((drvReadReg(USART0_BASEADDR,USART_UCSRA_OFFSET) & USART_DATA_REG_EMPTY) 
 830:	85 ff       	sbrs	r24, 5
 832:	fa cf       	rjmp	.-12     	; 0x828 <init_usart0+0x68>
const UINT8 DELAY = 100;

/* wrapper for writing register */
void drvWriteReg(UINT16 base, UINT16 offset, UINT8 value)
{
	*((volatile UINT16 *)(base + (offset*ADDR_MULTIPLIER))) = value;
 834:	8e 2f       	mov	r24, r30
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	90 93 c7 00 	sts	0x00C7, r25
 83c:	80 93 c6 00 	sts	0x00C6, r24
 840:	2f 5f       	subi	r18, 0xFF	; 255
 842:	3f 4f       	sbci	r19, 0xFF	; 255
	drvUSARTWriteString((UINT8 *)string, sizeof(string));
}

void drvUSARTWriteString(const UINT8 * data,UINT8 length)
{
	while(*data != '\0')
 844:	fa 01       	movw	r30, r20
 846:	e2 0f       	add	r30, r18
 848:	f3 1f       	adc	r31, r19
 84a:	e0 81       	ld	r30, Z
 84c:	ee 23       	and	r30, r30
 84e:	61 f7       	brne	.-40     	; 0x828 <init_usart0+0x68>
    /* write baud rate register */
   	drvWriteUint16Reg(USART0_BASEADDR,USART_UBRR_OFFSET,val);

    /* send I'm alive message */
	drvUSARTWriteString((UINT8 *)string, sizeof(string));
}
 850:	2f 96       	adiw	r28, 0x0f	; 15
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	f8 94       	cli
 856:	de bf       	out	0x3e, r29	; 62
 858:	0f be       	out	0x3f, r0	; 63
 85a:	cd bf       	out	0x3d, r28	; 61
 85c:	cf 91       	pop	r28
 85e:	df 91       	pop	r29
 860:	08 95       	ret

00000862 <timer_interrupt>:
void timer_interrupt() {
    static UINT8 pin;
	static UINT8 on;

    /* reset the timer */
    HWREG(TCNT0) = 256-DELAY; 
 862:	e6 b5       	in	r30, 0x26	; 38
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	8c e9       	ldi	r24, 0x9C	; 156
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	91 83       	std	Z+1, r25	; 0x01
 86c:	80 83       	st	Z, r24
	    
	toggle_pin(DRV_PORTB+DRV_GPIO_PORT_OFFSET,pin);
 86e:	40 91 24 02 	lds	r20, 0x0224


void toggle_pin(UINT16 port, UINT8 pin) {

	/* set port for output */
	HWREG(port-1) |= 1<<pin; 
 872:	24 b1       	in	r18, 0x04	; 4
 874:	35 b1       	in	r19, 0x05	; 5
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	04 2e       	mov	r0, r20
 87c:	02 c0       	rjmp	.+4      	; 0x882 <timer_interrupt+0x20>
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	0a 94       	dec	r0
 884:	e2 f7       	brpl	.-8      	; 0x87e <timer_interrupt+0x1c>
 886:	28 2b       	or	r18, r24
 888:	39 2b       	or	r19, r25
 88a:	35 b9       	out	0x05, r19	; 5
 88c:	24 b9       	out	0x04, r18	; 4


	HWREG(port) ^= 1<<pin;
 88e:	25 b1       	in	r18, 0x05	; 5
 890:	36 b1       	in	r19, 0x06	; 6
 892:	82 27       	eor	r24, r18
 894:	93 27       	eor	r25, r19
 896:	96 b9       	out	0x06, r25	; 6
 898:	85 b9       	out	0x05, r24	; 5
    /* reset the timer */
    HWREG(TCNT0) = 256-DELAY; 
	    
	toggle_pin(DRV_PORTB+DRV_GPIO_PORT_OFFSET,pin);
	/* increment to next pin after toggle on/off once. */
	if ( pin < 8 ) {
 89a:	48 30       	cpi	r20, 0x08	; 8
 89c:	c0 f4       	brcc	.+48     	; 0x8ce <timer_interrupt+0x6c>
	    if ( on<1 ) {
 89e:	80 91 23 02 	lds	r24, 0x0223
 8a2:	88 23       	and	r24, r24
 8a4:	21 f4       	brne	.+8      	; 0x8ae <timer_interrupt+0x4c>
			on++;
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	80 93 23 02 	sts	0x0223, r24
 8ac:	08 95       	ret
        } else {
   	        pin += 1;
 8ae:	4f 5f       	subi	r20, 0xFF	; 255
 8b0:	40 93 24 02 	sts	0x0224, r20
			on = 0;
 8b4:	10 92 23 02 	sts	0x0223, r1
        /* if the operator is pressing the current button then
	       reset the count */
            if ( drvTestBit(DRV_PORTD,DRV_GPIO_PIN_OFFSET,pin) )
 8b8:	89 e2       	ldi	r24, 0x29	; 41
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	0e 94 32 02 	call	0x464	; 0x464 <drvTestBit>
 8c4:	88 23       	and	r24, r24
 8c6:	29 f0       	breq	.+10     	; 0x8d2 <timer_interrupt+0x70>
	            pin = 0;
 8c8:	10 92 24 02 	sts	0x0224, r1
 8cc:	08 95       	ret
        }
    }
    else 
	    pin = 0;
 8ce:	10 92 24 02 	sts	0x0224, r1
 8d2:	08 95       	ret

000008d4 <__vector_23>:
}

/* in you port.c code */
/* timer 0 overflow interrupt service routine */
void __vector_23 (void) 
{ 
 8d4:	78 94       	sei
 8d6:	1f 92       	push	r1
 8d8:	0f 92       	push	r0
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	0f 92       	push	r0
 8de:	0b b6       	in	r0, 0x3b	; 59
 8e0:	0f 92       	push	r0
 8e2:	11 24       	eor	r1, r1
 8e4:	2f 93       	push	r18
 8e6:	3f 93       	push	r19
 8e8:	4f 93       	push	r20
 8ea:	5f 93       	push	r21
 8ec:	6f 93       	push	r22
 8ee:	7f 93       	push	r23
 8f0:	8f 93       	push	r24
 8f2:	9f 93       	push	r25
 8f4:	af 93       	push	r26
 8f6:	bf 93       	push	r27
 8f8:	ef 93       	push	r30
 8fa:	ff 93       	push	r31
    timer_interrupt();
 8fc:	0e 94 31 04 	call	0x862	; 0x862 <timer_interrupt>
	sei();
 900:	78 94       	sei
}
 902:	ff 91       	pop	r31
 904:	ef 91       	pop	r30
 906:	bf 91       	pop	r27
 908:	af 91       	pop	r26
 90a:	9f 91       	pop	r25
 90c:	8f 91       	pop	r24
 90e:	7f 91       	pop	r23
 910:	6f 91       	pop	r22
 912:	5f 91       	pop	r21
 914:	4f 91       	pop	r20
 916:	3f 91       	pop	r19
 918:	2f 91       	pop	r18
 91a:	0f 90       	pop	r0
 91c:	0b be       	out	0x3b, r0	; 59
 91e:	0f 90       	pop	r0
 920:	0f be       	out	0x3f, r0	; 63
 922:	0f 90       	pop	r0
 924:	1f 90       	pop	r1
 926:	18 95       	reti

00000928 <main>:
#include "drvapi.h"



int main() {
 928:	df 93       	push	r29
 92a:	cf 93       	push	r28
 92c:	00 d0       	rcall	.+0      	; 0x92e <main+0x6>
 92e:	0f 92       	push	r0
 930:	0f 92       	push	r0
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
    UINT8 pinvalue;

    DRVCTRL example;

    drvinit(example);
 936:	49 81       	ldd	r20, Y+1	; 0x01
 938:	5a 81       	ldd	r21, Y+2	; 0x02
 93a:	6b 81       	ldd	r22, Y+3	; 0x03
 93c:	7c 81       	ldd	r23, Y+4	; 0x04
 93e:	8d 81       	ldd	r24, Y+5	; 0x05
 940:	0e 94 95 00 	call	0x12a	; 0x12a <drvinit>

	pinvalue = gpio_read_pin(&example,PORTD, 1);
 944:	6b b1       	in	r22, 0x0b	; 11
 946:	ce 01       	movw	r24, r28
 948:	01 96       	adiw	r24, 0x01	; 1
 94a:	41 e0       	ldi	r20, 0x01	; 1
 94c:	0e 94 b3 00 	call	0x166	; 0x166 <gpio_read_pin>

	init_gpio(DRV_PORTB);
 950:	83 e2       	ldi	r24, 0x23	; 35
 952:	0e 94 e5 02 	call	0x5ca	; 0x5ca <init_gpio>
	init_gpio(DRV_PORTD);
 956:	89 e2       	ldi	r24, 0x29	; 41
 958:	0e 94 e5 02 	call	0x5ca	; 0x5ca <init_gpio>
	   function where I could just pass a pointer to a
	   function that would be called when the timer
	   overflowed, like the one below.
    */
    /* schedulePeriodicTask(timePeriod,&task); */
    init_timer();
 95c:	0e 94 9a 00 	call	0x134	; 0x134 <init_timer>

    init_usart0();
 960:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <init_usart0>

    init_eeprom();
 964:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <init_eeprom>

	process();
 968:	0e 94 2d 01 	call	0x25a	; 0x25a <process>
 96c:	ff cf       	rjmp	.-2      	; 0x96c <main+0x44>

0000096e <__udivmodhi4>:
 96e:	aa 1b       	sub	r26, r26
 970:	bb 1b       	sub	r27, r27
 972:	51 e1       	ldi	r21, 0x11	; 17
 974:	07 c0       	rjmp	.+14     	; 0x984 <__udivmodhi4_ep>

00000976 <__udivmodhi4_loop>:
 976:	aa 1f       	adc	r26, r26
 978:	bb 1f       	adc	r27, r27
 97a:	a6 17       	cp	r26, r22
 97c:	b7 07       	cpc	r27, r23
 97e:	10 f0       	brcs	.+4      	; 0x984 <__udivmodhi4_ep>
 980:	a6 1b       	sub	r26, r22
 982:	b7 0b       	sbc	r27, r23

00000984 <__udivmodhi4_ep>:
 984:	88 1f       	adc	r24, r24
 986:	99 1f       	adc	r25, r25
 988:	5a 95       	dec	r21
 98a:	a9 f7       	brne	.-22     	; 0x976 <__udivmodhi4_loop>
 98c:	80 95       	com	r24
 98e:	90 95       	com	r25
 990:	bc 01       	movw	r22, r24
 992:	cd 01       	movw	r24, r26
 994:	08 95       	ret

00000996 <_exit>:
 996:	f8 94       	cli

00000998 <__stop_program>:
 998:	ff cf       	rjmp	.-2      	; 0x998 <__stop_program>
